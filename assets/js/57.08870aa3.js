(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{347:function(t,s,v){"use strict";v.r(s);var _=v(14),n=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在学习算法设计方法的时候，对递归、递推、迭代几个概念总是容易混淆，特别是递推和迭代，感觉就是一个意思。现在从百度百科开始，再结合实例分析这三者的区别在哪里")]),t._v(" "),s("h2",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("递推算法：")]),t._v("  按照一定的规律来计算序列中的每个项，通常是通过计算机前面的一些项来得出序列中的指定项的值。其思想是把一个复杂的"),s("strong",[t._v("庞大")]),t._v("的计算过程转化为"),s("strong",[t._v("简单过程")]),t._v("的多次"),s("strong",[t._v("重复")]),t._v("。递推分为顺推和逆推。")]),t._v(" "),s("li",[t._v("**迭代法：**也称辗转法，是一种不断用变量旧值递推新值得过程。")]),t._v(" "),s("li",[s("strong",[t._v("递归："),s("strong",[t._v("程序调用自身的编程技巧叫递归。一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个")]),t._v("大型复杂的问题")]),t._v("层层转化为一个与"),s("strong",[t._v("原问题相似的规模较小的问题")]),t._v("来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归算法的执行过程分为"),s("strong",[t._v("递推和回归")]),t._v("两个阶段。在递推阶段，把问题拆成小问题，然后求解。在回归阶段，得到最简答情况的解后，逐级返回，得到稍复杂问题的解，直到得到结果。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);