(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{300:function(a,s,t){a.exports=t.p+"assets/img/脚手架项目初始化.25f1c942.png"},301:function(a,s,t){a.exports=t.p+"assets/img/npm添加组织.a7282458.png"},356:function(a,s,t){"use strict";t.r(s);var e=t(14),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"原生脚手架的痛点分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原生脚手架的痛点分析"}},[a._v("#")]),a._v(" 原生脚手架的痛点分析")]),a._v(" "),s("blockquote",[s("p",[a._v("Package越多，管理起来越复杂")])]),a._v(" "),s("ul",[s("li",[a._v("痛点一：重复操作\n"),s("ul",[s("li",[a._v("多 Package 本地link")]),a._v(" "),s("li",[a._v("多 Package 依赖安装")]),a._v(" "),s("li",[a._v("多 Package 单元测试")]),a._v(" "),s("li",[a._v("多 Package 代码提交和发布")])])]),a._v(" "),s("li",[a._v("痛点二：版本一致性\n"),s("ul",[s("li",[a._v("发布时版本一致性")]),a._v(" "),s("li",[a._v("发布后相互依赖版本的升级")])])])]),a._v(" "),s("h2",{attrs:{id:"lerna简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lerna简介"}},[a._v("#")]),a._v(" Lerna简介")]),a._v(" "),s("blockquote",[s("p",[a._v("lerna 是一个优化基于 git+npm的多Package项目管理工具")])]),a._v(" "),s("h3",{attrs:{id:"优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[a._v("#")]),a._v(" 优势")]),a._v(" "),s("ul",[s("li",[a._v("能大幅度减少重复操作")]),a._v(" "),s("li",[a._v("提升操作的标准化，解决当项目太复杂时，耗时耗力还容易出错的问题")])]),a._v(" "),s("blockquote",[s("p",[a._v("Lerna 是架构化的产物，它揭示了一个架构真理：当项目的复杂度提升的时候，就需要对项目进行架构优化，架构优化的目的往往都是以团队效能为核心")])]),a._v(" "),s("h2",{attrs:{id:"lerna-脚手架项目开发流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lerna-脚手架项目开发流程"}},[a._v("#")]),a._v(" Lerna 脚手架项目开发流程")]),a._v(" "),s("p",[s("img",{attrs:{src:t(300),alt:""}})]),a._v(" "),s("h3",{attrs:{id:"初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[a._v("#")]),a._v(" 初始化")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 新建工程 bean-cli-lerna")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" bean-cli-lerna\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 初始化 npm 项目")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" iniy "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-y")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装&初始化lerna")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-D")]),a._v(" lerna\nlerna init\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 控制台打印：初始化了git，更新了package.json，创建了lerna.json文件，创建了packages目录")]),a._v("\nlerna notice cli v6.0.1\nlerna info Creating .gitignore\nlerna info Updating package.json\nlerna info Creating lerna.json\nlerna info Creating packages directory\nlerna success Initialized Lerna files\n")])])]),s("h3",{attrs:{id:"创建package"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建package"}},[a._v("#")]),a._v(" 创建Package")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建 core , 包命名为@bean-cli-lerna/core")]),a._v("\nlerna create core\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建 utils")]),a._v("\nlerna create utils\n\n")])])]),s("p",[a._v("使用 "),s("code",[a._v("@bean-cli-lerna/core")]),a._v(" 要先创建组织，在npm中")]),a._v(" "),s("p",[s("img",{attrs:{src:t(301),alt:""}})]),a._v(" "),s("p",[a._v("使用组织的原因是为了避免冲突，因为很多简短得名称已经被注册了！！！")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装依赖")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" @bean-cli-lerna/utils packages/core/\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 链接")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("link")]),a._v("\n")])])]),s("h3",{attrs:{id:"开发和测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发和测试"}},[a._v("#")]),a._v(" 开发和测试")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 执行shell")]),a._v("\nlerna "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -- "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-rf")]),a._v(" ./node_modules\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重新安装依赖")]),a._v("\nlerna bootstrap\n")])])]),s("h3",{attrs:{id:"发布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发布"}},[a._v("#")]),a._v(" 发布")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("lerna publish\n")])])]),s("p",[a._v("注意事项：")]),a._v(" "),s("ul",[s("li",[a._v("先要初始化git仓库并且提交代码上传到远程")]),a._v(" "),s("li",[a._v("发布后出现 "),s("code",[a._v("You must sign up for private packages")]),a._v(" ，这时候需要登录且在包的 "),s("code",[a._v("package.json")]),a._v(" 添加以下代码")])]),a._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"publishConfig"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"access"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"public"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);